(self.webpackChunk=self.webpackChunk||[]).push([[3610],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,k=d["".concat(i,".").concat(m)]||d[m]||l[m]||c;return n?r.createElement(k,a(a({ref:t},u),{},{components:n})):r.createElement(k,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<c;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},44:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>i,metadata:()=>p,toc:()=>u,default:()=>d});var r=n(2122),o=n(9756),c=(n(7294),n(3905)),a=["components"],s={id:"test-mocks",title:"Mocks"},i=void 0,p={unversionedId:"references/test/test-mocks",id:"references/test/test-mocks",isDocsHomePage:!1,title:"Mocks",description:"Library for creating mocks for various tramvai entities",source:"@site/tmp-docs/references/test/test-mocks.md",sourceDirName:"references/test",slug:"/references/test/test-mocks",permalink:"/en/docs/references/test/test-mocks",editUrl:"https://github.com/TinkoffCreditSystems/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/test/test-mocks.md",version:"current",frontMatter:{id:"test-mocks",title:"Mocks"},sidebar:"docs",previous:{title:"JSDom tests",permalink:"/en/docs/references/test/test-jsdom"},next:{title:"Puppeteer tests",permalink:"/en/docs/references/test/test-puppeteer"}},u=[{value:"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",id:"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",children:[]},{value:"Api",id:"api",children:[{value:"STORE_TOKEN",id:"store_token",children:[]},{value:"DI",id:"di",children:[]},{value:"Context",id:"context",children:[]},{value:"Router",id:"router",children:[]}]}],l={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,c.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Library for creating mocks for various tramvai entities"),(0,c.kt)("h2",{id:"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save-dev @tramvai/test-mocks\n")),(0,c.kt)("h2",{id:"api"},"Api"),(0,c.kt)("h3",{id:"store_token"},"STORE_TOKEN"),(0,c.kt)("p",null,"Creates mock instance for token STORE_TOKEN which used in app as a common storage for store"),(0,c.kt)("h4",{id:"empty-state"},"Empty State"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMockStore } from '@tramvai/test-mocks';\n\nconst store = createMockStore();\nconst state = store.getState();\n\nstore.dispatch('event');\n")),(0,c.kt)("h4",{id:"initial-state"},"Initial State"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMockStore } from '@tramvai/test-mocks';\n\nconst initialState = { a: 1, b: 2 };\nconst reducerC = createReducer('c', 3);\nconst store = createMockStore({ stores: [reducerC], initialState });\n\nconst state = store.getState();\n")),(0,c.kt)("p",null,(0,c.kt)("details",null,(0,c.kt)("summary",null,"More examples"),(0,c.kt)("p",null,(0,c.kt)("pre",{parentName:"p"},(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createReducer, createEvent } from '@tramvai/state';\nimport { createMockStore } from './store';\n\ndescribe('test/unit/mocks/store', () => {\n  it('should create empty store', () => {\n    const store = createMockStore();\n    const spyGetState = jest.spyOn(store, 'getState');\n\n    expect(store.getState()).toEqual({});\n    expect(spyGetState).toHaveBeenCalled();\n  });\n\n  it('should update stores with dispatch', () => {\n    const event = createEvent<string>('testEvent');\n    const reducer = createReducer('test', { a: 'test' }).on(event, (_, data) => {\n      return {\n        a: data,\n      };\n    });\n    const store = createMockStore({ stores: [reducer] });\n\n    expect(store.getState()).toEqual({ test: { a: 'test' } });\n\n    store.dispatch(event('dispatched'));\n\n    expect(store.getState()).toEqual({ test: { a: 'dispatched' } });\n  });\n\n  it('should create store by initialState', () => {\n    const initialState = { a: 1, b: 2 };\n    const reducerA = createReducer('a', {});\n    const reducerB = createReducer('b', {});\n    const store = createMockStore({ stores: [reducerA, reducerB], initialState });\n\n    expect(store.getState()).toEqual(initialState);\n  });\n\n  it('should create fake reducer stores for every key in initialState', () => {\n    const initialState = { a: 1, b: 2 };\n    const reducerC = createReducer('c', 3);\n    const store = createMockStore({ stores: [reducerC], initialState });\n\n    expect(store.getState()).toEqual({\n      a: 1,\n      b: 2,\n      c: 3,\n    });\n  });\n});\n\n"))))),(0,c.kt)("h3",{id:"di"},"DI"),(0,c.kt)("p",null,"Creates mock instance of DI-container"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMockDi } from '@tramvai/test-mocks';\n\nconst di = createMockDi();\n\nconst dep = di.get(SOME_TOKEN);\n")),(0,c.kt)("h3",{id:"context"},"Context"),(0,c.kt)("p",null,"Creates mock instance for CONTEXT_TOKEN"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMockContext } from '@tramvai/test-mocks';\n\nit('test', async () => {\n  const context = createMockContext();\n\n  await context.dispatch('event');\n  await context.executeAction(action);\n\n  const spyExecuteAction = jest.spyOn(context, 'executeAction');\n\n  expect(spyExecuteAction).toHaveBeenCalled();\n});\n")),(0,c.kt)("p",null,(0,c.kt)("details",null,(0,c.kt)("summary",null,"More examples"),(0,c.kt)("p",null,(0,c.kt)("pre",{parentName:"p"},(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createEvent, createReducer } from '@tramvai/state';\nimport { createMockContext } from './context';\n\ndescribe('test/unit/mocks/context', () => {\n  it('should create consumer context', () => {\n    const context = createMockContext();\n\n    expect(context.executeAction).toBeInstanceOf(Function);\n    expect(context.getState).toBeInstanceOf(Function);\n    expect(context.dispatch).toBeInstanceOf(Function);\n\n    expect(context.getState()).toEqual({});\n  });\n\n  it('should dispatch data', async () => {\n    const event = createEvent<string>('mockEvent');\n    const reducer = createReducer('a', 'data').on(event, (_, data) => data);\n    const context = createMockContext({\n      stores: [reducer],\n    });\n\n    const spyDispatch = jest.spyOn(context, 'dispatch');\n\n    await context.dispatch(event('mock1'));\n\n    expect(spyDispatch).toHaveBeenCalledWith(event('mock1'));\n\n    expect(context.getState()).toEqual({ a: 'mock1' });\n  });\n});\n\n"))))),(0,c.kt)("h3",{id:"router"},"Router"),(0,c.kt)("p",null,"Creates mock instance for ",(0,c.kt)("inlineCode",{parentName:"p"},"@tinkoff/router")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createMockRouter } from '@tramvai/test-mocks';\n\ndescribe('test', () => {\n  it('should create router mock', () => {\n    const router = createMockRouter();\n\n    expect(router.getCurrentRoute()).toMatchObject({ path: '/' });\n    expect(router.getCurrentUrl()).toMatchObject({ path: '/' });\n  });\n\n  it('should allow to specify currentRoute', () => {\n    const router = createMockRouter({ currentRoute: { name: 'page', path: '/page/test/' } });\n\n    expect(router.getCurrentRoute()).toMatchObject({ path: '/page/test/' });\n    expect(router.getCurrentUrl()).toMatchObject({ path: '/page/test/' });\n  });\n});\n")))}d.isMDXComponent=!0}}]);