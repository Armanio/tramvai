(self.webpackChunk=self.webpackChunk||[]).push([[2933],{3905:(e,n,t)=>{"use strict";t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9683:(e,n,t)=>{"use strict";t.r(n),t.d(n,{frontMatter:()=>l,contentTitle:()=>s,metadata:()=>d,toc:()=>p,default:()=>u});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],l={id:"render",title:"render"},s=void 0,d={unversionedId:"references/modules/render",id:"references/modules/render",isDocsHomePage:!1,title:"render",description:"Module for rendering React application on the server and in the browser",source:"@site/tmp-docs/references/modules/render.md",sourceDirName:"references/modules",slug:"/references/modules/render",permalink:"/en/docs/references/modules/render",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/modules/render.md",version:"current",frontMatter:{id:"render",title:"render"},sidebar:"docs",previous:{title:"react-query",permalink:"/en/docs/references/modules/react-query"},next:{title:"router",permalink:"/en/docs/references/modules/router"}},p=[{value:"Overview",id:"overview",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Explanation",id:"explanation",children:[{value:"Different React rendering modes",id:"different-react-rendering-modes",children:[]},{value:"Application static assets",id:"application-static-assets",children:[]},{value:"Automatic resource inlining",id:"automatic-resource-inlining",children:[]},{value:"Automatic resource preloading",id:"automatic-resource-preloading",children:[]},{value:"Basic layout",id:"basic-layout",children:[]}]},{value:"How to",id:"how-to",children:[{value:"How to add assets loading to a page",id:"how-to-add-assets-loading-to-a-page",children:[]},{value:"Gradual concurrent mode adoption",id:"gradual-concurrent-mode-adoption",children:[]},{value:"Testing",id:"testing",children:[]}]},{value:"Exported tokens",id:"exported-tokens",children:[]}],c={toc:p};function u(e){var n=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Module for rendering React application on the server and in the browser"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"init command",src:t(1701).Z})),(0,o.kt)("p",null,"Module contains the logic for generating HTML pages, starting from getting current page component, and finishing with the rendering result HTML using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@tinkoff/htmlpagebuilder")," library."),(0,o.kt)("p",null,"This module includes code for creating top-level React component with all necessary providers composition, and page and layout components from the current route."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"You need to install ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/module-render")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm install @tramvai/module-render\n")),(0,o.kt)("p",null,"And connect to the project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createApp } from '@tramvai/core';\nimport { RenderModule } from '@tramvai/module-render';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [RenderModule],\n});\n")),(0,o.kt)("h2",{id:"explanation"},"Explanation"),(0,o.kt)("h3",{id:"different-react-rendering-modes"},"Different React rendering modes"),(0,o.kt)("p",null,"More information about rendering modes can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/concurrent-mode-adoption.html"},"official documentation"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderModule")," has support for all rendering types and you can choose the right one for your application."),(0,o.kt)("p",null,"To set the mode, you must pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"mode")," parameter when initializing the ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderModule"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"RenderModule.forRoot({ mode: 'concurrent' });\n")),(0,o.kt)("p",null,"Available modes: ",(0,o.kt)("inlineCode",{parentName:"p"},"'legacy' | 'strict' | 'blocking' | 'concurrent'")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#gradual-concurrent-mode-adoption"},"Gradual concurrent mode adoption")),(0,o.kt)("h3",{id:"application-static-assets"},"Application static assets"),(0,o.kt)("p",null,"For static assets (JS, CSS, fonts, etc.) we create special resources registry module, which allow to provide in DI list of resources, and then render them to specifics slots in final HTML."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"createApp({\n  providers: [\n    {\n      multi: true,\n      useValue: [\n        {\n          type: ResourceType.inlineScript, // inlineScript wrap payload in tag <script>\n          slot: ResourceSlot.HEAD_CORE_SCRIPTS, // define position where in HTML will be included resource\n          payload: 'alert(\"render\")',\n        },\n        {\n          type: ResourceType.asIs, // asIs just add payload as a string, without special processing\n          slot: ResourceSlot.BODY_TAIL,\n          payload: '<div>hello from render slots</div>',\n        },\n      ],\n    },\n  ],\n});\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"type")," - presets for different resources types"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"slot")," - slot in HTML where resource will be included"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"payload")," - information that will be rendered")),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Available slots"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export const REACT_RENDER = 'react:render';\nexport const HEAD_PERFORMANCE = 'head:performance';\nexport const HEAD_META = 'head:meta';\nexport const HEAD_POLYFILLS = 'head:polyfills';\nexport const HEAD_CORE_STYLES = 'head:core-styles';\nexport const HEAD_CORE_SCRIPTS = 'head:core-scripts';\nexport const HEAD_DYNAMIC_SCRIPTS = 'head:dynamic-scripts';\nexport const HEAD_ANALYTICS = 'head:analytics';\nexport const HEAD_ICONS = 'head:icons';\nexport const BODY_START = 'body:start';\nexport const BODY_END = 'body:end';\nexport const BODY_TAIL_ANALYTICS = 'body:tail:analytics';\nexport const BODY_TAIL = 'body:tail';\n\n"))))),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Layout of slots in the HTML page"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import type { StaticDescriptor, DynamicDescriptor } from '@tinkoff/htmlpagebuilder';\nimport { dynamicRender, staticRender } from '@tinkoff/htmlpagebuilder';\nimport { ResourceSlot } from '@tramvai/tokens-render';\nimport { formatAttributes } from './utils';\n\nconst {\n  REACT_RENDER,\n  HEAD_CORE_SCRIPTS,\n  HEAD_DYNAMIC_SCRIPTS,\n  HEAD_META,\n  HEAD_POLYFILLS,\n  HEAD_CORE_STYLES,\n  HEAD_PERFORMANCE,\n  HEAD_ANALYTICS,\n  BODY_START,\n  BODY_END,\n  HEAD_ICONS,\n  BODY_TAIL_ANALYTICS,\n  BODY_TAIL,\n} = ResourceSlot;\n\nexport const htmlPageSchemaFactory = ({\n  htmlAttrs,\n}): Array<StaticDescriptor | DynamicDescriptor> => {\n  return [\n    staticRender('<!DOCTYPE html>'),\n    staticRender(`<html ${formatAttributes(htmlAttrs, 'html')}>`),\n\n    staticRender('<head>'),\n    staticRender('<meta charset=\"UTF-8\">'),\n    dynamicRender(HEAD_META),\n    dynamicRender(HEAD_PERFORMANCE),\n    dynamicRender(HEAD_CORE_STYLES),\n    dynamicRender(HEAD_POLYFILLS),\n    dynamicRender(HEAD_DYNAMIC_SCRIPTS),\n    dynamicRender(HEAD_CORE_SCRIPTS),\n    dynamicRender(HEAD_ANALYTICS),\n    dynamicRender(HEAD_ICONS),\n    staticRender('</head>'),\n    staticRender(`<body ${formatAttributes(htmlAttrs, 'body')}>`),\n    dynamicRender(BODY_START),\n    // react app\n    dynamicRender(REACT_RENDER),\n    dynamicRender(BODY_END),\n    dynamicRender(BODY_TAIL_ANALYTICS),\n    dynamicRender(BODY_TAIL),\n    staticRender('</body>'),\n    staticRender('</html>'),\n  ];\n};\n\n"))))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#How-to-add-assets-loading-to-a-page"},"How to add assets loading to a page")),(0,o.kt)("h3",{id:"automatic-resource-inlining"},"Automatic resource inlining"),(0,o.kt)("h4",{id:"concept"},"Concept"),(0,o.kt)("p",null,"A large number of resource files creates problems when loading the page, because the browser has to create a lot of connections to small files"),(0,o.kt)("h4",{id:"solution"},"Solution"),(0,o.kt)("p",null,"To optimize page loading, we've added the ability to include some resources directly in the incoming HTML from the server.\nTo avoid inlining everything at all, we've added the ability to set an upper limit for file size."),(0,o.kt)("h4",{id:"connection-and-configuration"},"Connection and configuration"),(0,o.kt)("p",null,"Since version ",(0,o.kt)("inlineCode",{parentName:"p"},"0.60.7")," inlining for styles is enabled by default, CSS files smaller than 40kb before gzip (+-10kb after gzip) are inlined.\nTo override these settings, add a provider specifying types of resources to be inlined (styles and/or scripts) and an upper limit for file size (in bytes, before gzip):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { RESOURCE_INLINE_OPTIONS } from '@tramvai/tokens-render';\nimport { ResourceType } from '@tramvai/tokens-render';\nimport { provide } from '@tramvai/core';\n\nprovide({\n  provide: RESOURCE_INLINE_OPTIONS,\n  useValue: {\n    types: [ResourceType.script, ResourceType.style], // Turn on for a CSS and JS files\n    threshold: 1024, // 1kb unzipped\n  },\n}),\n")),(0,o.kt)("h4",{id:"peculiarities"},"Peculiarities"),(0,o.kt)("p",null,"All scripts and styles (depending on the settings) registered through the ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourcesRegistry")," are inlined."),(0,o.kt)("p",null,"File uploading to the server occurs in lazy mode, asynchronously.\nThis means that there will be no inlining when the page first loads.\nIt also means that there is no extra waiting for resources to load on the server side.\nOnce the file is in the cache it will be inline.\nThe cache has a TTL of 30 minutes and there is no resetting of the cache."),(0,o.kt)("h3",{id:"automatic-resource-preloading"},"Automatic resource preloading"),(0,o.kt)("p",null,"To speed up data loading, we've added a preloading system for resources and asynchronous chunks, which works according to the following scenario:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"After rendering the application, we get information about all the CSS, JS bundles and asynchronous chunks used in the application"),(0,o.kt)("li",{parentName:"ul"},"Next we add all the CSS to the ",(0,o.kt)("strong",{parentName:"li"},"preload")," tag and add onload event on them. We need to load the blocking resources as quickly as possible."),(0,o.kt)("li",{parentName:"ul"},"When loading any CSS file, onload event will be fired (only once time) and add all ",(0,o.kt)("strong",{parentName:"li"},"preload")," tags to the necessary JS files")),(0,o.kt)("h3",{id:"basic-layout"},"Basic layout"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderModule")," has a default basic layout that supports different ways of extending and adding functionality"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/en/docs/references/libs/layout-factory"},"Read more about layout on the library page")),(0,o.kt)("h4",{id:"adding-a-basic-header-and-footer"},"Adding a basic header and footer"),(0,o.kt)("p",null,"The module allows you to add header and footer components, which will be rendered by default for all pages"),(0,o.kt)("h5",{id:"via-provider"},"Via provider"),(0,o.kt)("p",null,"Register header and footer components through providers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { DEFAULT_HEADER_COMPONENT, DEFAULT_FOOTER_COMPONENT } from '@tramvai/tokens-render';\nimport { provide } from '@tramvai/core';\n\ncreateApp({\n  providers: [\n    provide({\n      provide: DEFAULT_HEADER_COMPONENT,\n      useValue: DefaultHeader,\n    }),\n    provide({\n      provide: DEFAULT_FOOTER_COMPONENT,\n      useValue: DefaultFooter,\n    }),\n  ],\n});\n")),(0,o.kt)("h5",{id:"via-bundle"},"Via bundle"),(0,o.kt)("p",null,"You can register a ",(0,o.kt)("inlineCode",{parentName:"p"},"headerDefault")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"footerDefault")," component in the bundle, which will be rendered for all routes that do not have ",(0,o.kt)("inlineCode",{parentName:"p"},"headerComponent")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"footerComponent")," redefined in configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"createBundle({\n  name: 'common-bundle',\n  components: {\n    headerDefault: CustomHeader,\n    footerDefault: CustomFooter,\n  },\n});\n")),(0,o.kt)("h4",{id:"adding-components-and-wrappers"},"Adding components and wrappers"),(0,o.kt)("p",null,"You can add custom components and wrappers for layout via the token ",(0,o.kt)("inlineCode",{parentName:"p"},"LAYOUT_OPTIONS")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { provide } from '@tramvai/core';\n@Module({\n  providers: [\n    provide({\n      provide: 'LAYOUT_OPTIONS',\n      multi: true,\n      useValue: {\n        // React components\n        components: {\n          // content component, this component wraps the header, page and footer\n          content: Content,\n          // page component\n          page: Page,\n\n          // any global components\n          alerts: Alerts,\n          feedback: Feedback,\n        },\n        // HOC's for components\n        wrappers: {\n          layout: layoutWrapper,\n          alerts: [alertWrapper1, alertWrapper2],\n        },\n      },\n    }),\n  ],\n})\nexport class MyLayoutModule {}\n")),(0,o.kt)("p",null,"More details about the ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"wrappers")," options can be found in ",(0,o.kt)("a",{parentName:"p",href:"/en/docs/references/libs/layout-factory"},"@tinkoff/layout-factory")),(0,o.kt)("h4",{id:"replacing-the-basic-layout"},"Replacing the basic layout"),(0,o.kt)("p",null,"If the basic layout doesn't work for you, you can replace it with any other React component.\nIn doing so, you need to implement all the wrappers yourself and plug in global components if you need them."),(0,o.kt)("p",null,"You can replace it in two ways:"),(0,o.kt)("h5",{id:"add-layoutcomponent-to-route"},"Add layoutComponent to route"),(0,o.kt)("p",null,"You can add a ",(0,o.kt)("inlineCode",{parentName:"p"},"layoutComponent")," property to route ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," and register component in ",(0,o.kt)("inlineCode",{parentName:"p"},"bundle"),".\nThis layout will be rendered when you go to the corresponding route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"createBundle({\n  name: 'common-bundle',\n  components: {\n    myCustomLayout: CustomLayout,\n  },\n});\n")),(0,o.kt)("h5",{id:"replace-layoutdefault"},"Replace layoutDefault"),(0,o.kt)("p",null,"You can register a ",(0,o.kt)("inlineCode",{parentName:"p"},"layoutDefault")," component in ",(0,o.kt)("inlineCode",{parentName:"p"},"bundle"),", which will be automatically rendered for all routes that do not have an ",(0,o.kt)("inlineCode",{parentName:"p"},"layoutComponent")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"createBundle({\n  name: 'common-bundle',\n  components: {\n    layoutDefault: CustomLayout,\n  },\n});\n")),(0,o.kt)("h2",{id:"how-to"},"How to"),(0,o.kt)("h3",{id:"how-to-add-assets-loading-to-a-page"},"How to add assets loading to a page"),(0,o.kt)("p",null,"There are 2 main ways how you can add resources to your application"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"RENDER_SLOTS")," token, where you can pass a list of resources, such as HTML markup, inline scripts, script tag"),(0,o.kt)("li",{parentName:"ul"},"Token ",(0,o.kt)("inlineCode",{parentName:"li"},"RESOURCES_REGISTRY")," to get the resource manager, and register the desired resources manually")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("p",null,(0,o.kt)("details",null,(0,o.kt)("summary",null,"Application example"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import React from 'react';\nimport { createApp, createBundle, commandLineListTokens } from '@tramvai/core';\nimport {\n  RENDER_SLOTS,\n  RESOURCES_REGISTRY,\n  ResourceType,\n  ResourceSlot,\n} from '@tramvai/module-render';\nimport { modules } from '../common';\n\nfunction Page() {\n  return <div>Render</div>;\n}\n\nconst bundle = createBundle({\n  name: 'mainDefault',\n  components: {\n    pageDefault: Page,\n  },\n});\n\ncreateApp({\n  name: 'render-add-resources',\n  modules: [...modules],\n  providers: [\n    {\n      // If you want to add your own resources (scripts, styles, images) for loading,\n      // you can use the provider RENDER_SLOTS to add the necessary assets,\n      // all this will then be used in the RenderModule and inserted into HTML\n      provide: RENDER_SLOTS,\n      multi: true,\n      useValue: [\n        {\n          type: ResourceType.inlineScript, // inlineScript wrap payload in tag <script>\n          slot: ResourceSlot.HEAD_CORE_SCRIPTS, // define position where in HTML will be included resource\n          payload: 'alert(\"render\")',\n        },\n        {\n          type: ResourceType.asIs, // asIs just add payload as a string, without special processing\n          slot: ResourceSlot.BODY_TAIL,\n          payload: '<div>hello from render slots</div>',\n        },\n      ],\n    },\n    {\n      provide: commandLineListTokens.resolveUserDeps,\n      multi: true,\n      // You can also add resources separately via DI and the RESOURCES_REGISTRY token\n      useFactory: ({ resourcesRegistry }) => {\n        return function addMyScripts() {\n          resourcesRegistry.register({\n            type: ResourceType.script, // script will create new script tag with src equal to payload\n            slot: ResourceSlot.HEAD_ANALYTICS, // define position where in HTML will be included resource\n            payload: './some-script.js',\n          });\n        };\n      },\n      deps: {\n        resourcesRegistry: RESOURCES_REGISTRY,\n      },\n    },\n  ],\n  bundles: {\n    mainDefault: () => Promise.resolve({ default: bundle }),\n  },\n});\n\n"))))),(0,o.kt)("h3",{id:"gradual-concurrent-mode-adoption"},"Gradual concurrent mode adoption"),(0,o.kt)("p",null,"React allows a gradual migration of an application"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Stages of migration:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/strict-mode.html"},"Strict Mode")," - strict mode, in which React warns about using the legacy API")),(0,o.kt)("p",null,"To connect, you must configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderModule")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"modules: [\n  RenderModule.forRoot({ mode: 'strict' })\n]\n")),(0,o.kt)("p",null,"Then you need to fix any new warnings, such as using legacy lifecycle methods and string refs."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/concurrent-mode-adoption.html#migration-step-blocking-mode"},"Blocking Mode")," - adds some Concurrent Mode features, such as Suspense on the server. Suitable for gradual migration to Concurrent Mode.")),(0,o.kt)("p",null,"To connect, install an experimental version of React and configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderModule")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm install react@experimental react-dom@experimental\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"modules: [\n  RenderModule.forRoot({ mode: 'blocking' })\n]\n")),(0,o.kt)("p",null,"At this stage, you need to check the performance of the application, and you can try new APIs, for example ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist"},"SuspenseList")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Concurrent Mode")),(0,o.kt)("p",null,"To connect, install an experimental version of React and configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"RenderModule")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"npm2yarn",npm2yarn:!0},"npm install react@experimental react-dom@experimental\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"modules: [\n  RenderModule.forRoot({ mode: 'concurrent' })\n]\n")),(0,o.kt)("p",null,"At this stage, you need to check the performance of the application, and you can try new APIs, for example ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/concurrent-mode-patterns.html#transitions"},"useTransition")),(0,o.kt)("h3",{id:"testing"},"Testing"),(0,o.kt)("h4",{id:"testing-render-extensions-via-render_slots-or-resources_registry-tokens"},"Testing render extensions via RENDER_SLOTS or RESOURCES_REGISTRY tokens"),(0,o.kt)("p",null,"If you have a module or providers that define ",(0,o.kt)("inlineCode",{parentName:"p"},"RENDER_SLOTS")," or use ",(0,o.kt)("inlineCode",{parentName:"p"},"RESOURCES_REGISTRY"),", it is convenient to use special utilities to test them separately"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  RENDER_SLOTS,\n  ResourceSlot,\n  RESOURCES_REGISTRY,\n  ResourceType,\n} from \'@tramvai/tokens-render\';\nimport { testPageResources } from \'@tramvai/module-render/tests\';\nimport { CustomModule } from \'./module\';\nimport { providers } from \'./providers\';\n\ndescribe(\'testPageResources\', () => {\n  it(\'modules\', async () => {\n    const { render } = testPageResources({\n      modules: [CustomModule],\n    });\n    const { head } = render();\n\n    expect(head).toMatchInlineSnapshot(`\n"\n<meta charset=\\\\"UTF-8\\\\">\n<script>console.log(\\\\"from module!\\\\")<\/script>\n"\n`);\n  });\n\n  it(\'providers\', async () => {\n    const { render, runLine } = testPageResources({\n      providers,\n    });\n\n    expect(render().body).toMatchInlineSnapshot(`\n"\n"\n  `);\n\n    await runLine(commandLineListTokens.resolvePageDeps);\n\n    expect(render().body).toMatchInlineSnapshot(`\n"\n<script defer=\\\\"defer\\\\" charset=\\\\"utf-8\\\\" crossorigin=\\\\"anonymous\\\\" src=\\\\"https://scripts.org/script.js\\\\"><\/script>\n<span>I\\`m body!!!</span>\n"\n  `);\n  });\n});\n')),(0,o.kt)("h2",{id:"exported-tokens"},"Exported tokens"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/en/docs/references/tokens/render-tokens"},"link")))}u.isMDXComponent=!0},1701:(e,n,t)=>{"use strict";t.d(n,{Z:()=>r});const r=t.p+"assets/images/render-module.drawio-135c5da3c2151639eead38825438ab61.svg"}}]);