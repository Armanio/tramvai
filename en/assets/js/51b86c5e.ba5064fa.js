(self.webpackChunk=self.webpackChunk||[]).push([[1452],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6598:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>c,metadata:()=>p,toc:()=>l,default:()=>d});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={id:"test-unit",title:"Unit tests"},c=void 0,p={unversionedId:"references/test/test-unit",id:"references/test/test-unit",isDocsHomePage:!1,title:"Unit tests",description:"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0445\u0435\u043b\u043f\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 tramvai",source:"@site/tmp-docs/references/test/test-unit.md",sourceDirName:"references/test",slug:"/references/test/test-unit",permalink:"/en/docs/references/test/test-unit",editUrl:"https://github.com/TinkoffCreditSystems/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/test/test-unit.md",version:"current",frontMatter:{id:"test-unit",title:"Unit tests"},sidebar:"docs",previous:{title:"\u0412\u0441\u0442\u0430\u0432\u043a\u0430 inline-\u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435",permalink:"/en/docs/references/cli/serverInline"},next:{title:"React tests",permalink:"/en/docs/references/test/test-react"}},l=[{value:"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",id:"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435",children:[]},{value:"How to",id:"how-to",children:[{value:"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 reducers",id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-reducers",children:[]},{value:"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u043a\u0448\u0435\u043d\u043e\u0432",id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u044d\u043a\u0448\u0435\u043d\u043e\u0432",children:[]},{value:"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 tramvai-\u043c\u043e\u0434\u0443\u043b\u044f",id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-tramvai-\u043c\u043e\u0434\u0443\u043b\u044f",children:[]},{value:"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f",id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f",children:[]}]}],u={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0445\u0435\u043b\u043f\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 tramvai"),(0,o.kt)("h2",{id:"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save-dev @tramvai/test-unit\n")),(0,o.kt)("h2",{id:"how-to"},"How to"),(0,o.kt)("h3",{id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-reducers"},"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 reducers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testReducer } from '@tramvai/test-unit';\n\nit('test', async () => {\n  const { dispatch, getState } = testReducer(reducer);\n\n  expect(getState()).toEqual([]);\n\n  dispatch(event(1));\n\n  expect(getState()).toEqual([1]);\n});\n")),(0,o.kt)("h3",{id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u044d\u043a\u0448\u0435\u043d\u043e\u0432"},"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u044d\u043a\u0448\u0435\u043d\u043e\u0432"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testAction } from '@tramvai/test-unit';\n\nit('test', async () => {\n  const { run } = testAction(action);\n\n  expect(await run(true)).toBe('hello');\n  expect(await run(false)).toBe('world');\n});\n")),(0,o.kt)("h3",{id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-tramvai-\u043c\u043e\u0434\u0443\u043b\u044f"},"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 tramvai-\u043c\u043e\u0434\u0443\u043b\u044f"),(0,o.kt)("h4",{id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u043c\u043e\u0434\u0443\u043b\u044f-\u0432-\u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438"},"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f \u0432 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u0438"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testModule } from '@tramvai/test-unit';\n\nit('test', async () => {\n  const { di, module, runLine } = testModule(TestModule);\n\n  expect(module).toBeInstanceOf(TestModule);\n  expect(di.get('testToken')).toEqual({ a: 1 });\n\n  await runLine(commandLineListTokens.generatePage);\n});\n")),(0,o.kt)("h4",{id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f-\u043c\u043e\u0434\u0443\u043b\u044f-\u0432-\u0441\u0432\u044f\u0437\u043a\u0435-\u0441-\u0434\u0440\u0443\u0433\u0438\u043c\u0438-\u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438"},"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f \u0432 \u0441\u0432\u044f\u0437\u043a\u0435 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createTestApp } from '@tramvai/test-unit';\n\nit('test', async () => {\n  const { app } = await createTestApp({ modules: [TestModule, DependentModule] });\n\n  expect(app.di.get('testToken')).toEqual({ a: 1 });\n});\n")),(0,o.kt)("h3",{id:"\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 node-environment. \u0421\u043c\u043e\u0442\u0440\u0438, \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f ",(0,o.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/27.0/configuration#testenvironment-string"},"jest"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { testApp } from '@tramvai/test-unit';\n\nit('test', async () => {\n  const { request, render } = await testApp(app);\n\n  const response = await request('/').expect(200).expect('X-App-Id', 'unit-app');\n\n  expect(response.text).toMatch('<html class=\"no-js\" lang=\"ru\">');\n  expect(response.text).toMatch('<div class=\"application\">rootPage</div>');\n  expect(response.text).toMatch('<script>var initialState =');\n\n  const rootPage = await render('/');\n\n  expect(rootPage.application).toEqual('rootPage');\n\n  const secondPage = await render('/second/');\n\n  expect(secondPage.application).toEqual('secondPage');\n  expect(secondPage.initialState).toEqual({\n    stores: expect.objectContaining({\n      environment: {\n        FRONT_LOG_API: 'test',\n      },\n      router: expect.objectContaining({\n        currentUrl: expect.objectContaining({\n          path: '\\\\u002Fsecond\\\\u002F',\n        }),\n      }),\n    }),\n  });\n});\n")),(0,o.kt)("h4",{id:"\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432-\u0432-di"},"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u0432 \u0432 DI"),(0,o.kt)("p",null,"\u041e\u043f\u0446\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0443\u0442\u0438\u043b\u0438\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e ",(0,o.kt)("inlineCode",{parentName:"p"},"providers"),", \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0435."),(0,o.kt)("p",null,"\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0432 ",(0,o.kt)("inlineCode",{parentName:"p"},"testAction"),", \u043a \u043d\u0435\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u044d\u043a\u0448\u0435\u043d\u0430:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createAction } from '@tramvai/core';\nimport { testAction } from '@tramvai/test-unit';\n\nconst action = createAction({\n  name: 'action',\n  fn: (_, __, { test }) => {\n    console.log(test); // token value\n  },\n  deps: {\n    test: 'token name',\n  },\n});\n\nit('test', async () => {\n  const { run } = testAction(action, {\n    providers: [\n      {\n        provide: 'token name',\n        useValue: 'token value',\n      },\n    ],\n  });\n});\n")))}d.isMDXComponent=!0}}]);