"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5513],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>m});var r=o(7294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function c(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,r)}return o}function s(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?c(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function a(e,n){if(null==e)return{};var o,r,t=function(e,n){if(null==e)return{};var o,r,t={},c=Object.keys(e);for(r=0;r<c.length;r++)o=c[r],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)o=c[r],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var i=r.createContext({}),l=function(e){var n=r.useContext(i),o=n;return e&&(o="function"==typeof e?e(n):s(s({},n),e)),o},p=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var o=e.components,t=e.mdxType,c=e.originalType,i=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),f=l(o),m=t,u=f["".concat(i,".").concat(m)]||f[m]||d[m]||c;return o?r.createElement(u,s(s({ref:n},p),{},{components:o})):r.createElement(u,s({ref:n},p))}));function m(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=o.length,s=new Array(c);s[0]=f;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a.mdxType="string"==typeof e?e:t,s[1]=a;for(var l=2;l<c;l++)s[l]=o[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,o)}f.displayName="MDXCreateElement"},3794:(e,n,o)=>{o.r(n),o.d(n,{frontMatter:()=>a,contentTitle:()=>i,metadata:()=>l,toc:()=>p,default:()=>f});var r=o(3117),t=o(102),c=(o(7294),o(3905)),s=["components"],a={id:"depscheck",title:"@tinkoff-monorepo/depscheck"},i=void 0,l={unversionedId:"references/tools/monorepo-tools/depscheck",id:"references/tools/monorepo-tools/depscheck",title:"@tinkoff-monorepo/depscheck",description:"Tool for checking correctness dependency description.",source:"@site/tmp-docs/references/tools/monorepo-tools/depscheck.md",sourceDirName:"references/tools/monorepo-tools",slug:"/references/tools/monorepo-tools/depscheck",permalink:"/en/docs/references/tools/monorepo-tools/depscheck",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/tools/monorepo-tools/depscheck.md",tags:[],version:"current",frontMatter:{id:"depscheck",title:"@tinkoff-monorepo/depscheck"},sidebar:"docs",previous:{title:"@tinkoff-monorepo/fix-ts-references",permalink:"/en/docs/references/tools/monorepo-tools/fix-ts-references"},next:{title:"@tinkoff-monorepo/pkgs-collector-dir",permalink:"/en/docs/references/tools/monorepo-tools/pkgs-collector-dir"}},p=[{value:"Config parameters for .depscheckrc.yml and cli",id:"config-parameters-for-depscheckrcyml-and-cli",children:[{value:"Config example",id:"config-example",children:[],level:3}],level:2}],d={toc:p};function f(e){var n=e.components,o=(0,t.Z)(e,s);return(0,c.kt)("wrapper",(0,r.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Tool for checking correctness dependency description."),(0,c.kt)("p",null,"Tool is configured through ",(0,c.kt)("inlineCode",{parentName:"p"},".depscheckrc")," file and cli options."),(0,c.kt)("p",null,"Under the hood ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/depcheck/depcheck"},"depcheck")," is used."),(0,c.kt)("h2",{id:"config-parameters-for-depscheckrcyml-and-cli"},"Config parameters for .depscheckrc.yml and cli"),(0,c.kt)("p",null,"All of the available parameters for the ",(0,c.kt)("inlineCode",{parentName:"p"},"depscheck")," can be seen in ",(0,c.kt)("a",{parentName:"p",href:"https://github.com/depcheck/depcheck/tree/0.9.2"},"docs"),"."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-sh"},'collector\n  --collector                  Module for collecting packages for depshcheck.\n                               Should implement interface\n                               @tinkoff-monorepo/pkgs-collector ->\n                               CollectorInterface (currently\n                               @tinkoff-monorepo/pkgs-collector-pvm is used)\n    [required] [default: {"name":"@tinkoff-monorepo/pkgs-collector-workspaces"}]\n  --collector-config-strategy\n                      [string] [choices: "about-to-update", "update", "changed",\n    "changed-since-release", "affected", "released", "updated", "all"] [default:\n                                                                   ["affected"]]\n\ndepcheck\n  --depcheck-ignore-matches      List of module patterns that should not\n                                 generate error in case they are missing in\n                                 package.json              [array] [default: []]\n  --depcheck-ignore-dirs         List of directory names that depscheck should\n                                 not check                 [array] [default: []]\n  --depcheck-skip-missing        Disable check for missing dependencies\n                                                      [boolean] [default: false]\n  --depcheck-ignore-bin-package  Disable checks in bin files for project\n                                                      [boolean] [default: false]\n\nOptions:\n  --version                   Show version number                      [boolean]\n  --config                    Path to the config (by default cosmiconfig is\n                              used)                                     [string]\n  --fix                       Enables fix error mode. Currently only fixes\n                              unused dependency errors[boolean] [default: false]\n  --ignore-patterns           List of file patterns that should be ignored for\n                              checks on missing deps       [array] [default: []]\n  --ignore-peer-dependencies  List of module patterns from peerDependencies that\n                              should not generate error when dependency is\n                              missing                      [array] [default: []]\n  --ignore-unused             List of module patterns that should not generate\n                              error when dependency is not used\n                                                           [array] [default: []]\n  -h                          Show help                                [boolean]\n')),(0,c.kt)("h3",{id:"config-example"},"Config example"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-yaml"},"ignore-patterns:\n  ['**/*.spec.{ts,tsx}', '**/*.test.{ts,tsx}', '**/dynamic-components/*/shared/externals.{js,ts}']\ndepcheck-ignore-dirs: ['__integration__', 'examples', '__tests__']\ndepcheck-ignore-matches: ['@platform/cli', '@tramvai/tools-migrate']\n")))}f.isMDXComponent=!0}}]);