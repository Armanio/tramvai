(self.webpackChunk=self.webpackChunk||[]).push([[4619],{3905:(e,r,n)=>{"use strict";n.d(r,{Zo:()=>m,kt:()=>d});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},m=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return n?t.createElement(f,a(a({ref:r},m),{},{components:n})):t.createElement(f,a({ref:r},m))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3511:(e,r,n)=>{"use strict";n.r(r),n.d(r,{frontMatter:()=>s,contentTitle:()=>c,metadata:()=>l,toc:()=>m,default:()=>p});var t=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],s={id:"browser-timings",title:"browser-timings"},c=void 0,l={unversionedId:"references/libs/browser-timings",id:"references/libs/browser-timings",isDocsHomePage:!1,title:"browser-timings",description:"Lib for measure client browsers performance. Automatically collects performance data on page load.",source:"@site/tmp-docs/references/libs/browser-timings.md",sourceDirName:"references/libs",slug:"/references/libs/browser-timings",permalink:"/docs/references/libs/browser-timings",editUrl:"https://github.com/TinkoffCreditSystems/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/libs/browser-timings.md",version:"current",frontMatter:{id:"browser-timings",title:"browser-timings"},sidebar:"docs",previous:{title:"server",permalink:"/docs/references/modules/server"},next:{title:"browserslist-config",permalink:"/docs/references/libs/browserslist-config"}},m=[{value:"Installation",id:"installation",children:[]},{value:"How to",id:"how-to",children:[]},{value:"Lib interface",id:"lib-interface",children:[]}],u={toc:m};function p(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Lib for measure client browsers performance. Automatically collects performance data on page load."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Install npm package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @tinkoff/browser-timings\n")),(0,i.kt)("h2",{id:"how-to"},"How to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { browserTimings } from '@tinkoff/browser-timings';\n\nwindow.addEventListener('load', () => {\n  setTimeout(() => {\n    // setTimeout is necessary in order to get metrics about loadEventEnd\n    const perfData = browserTimings();\n  }, 0);\n});\n")),(0,i.kt)("p",null,"After executing ",(0,i.kt)("inlineCode",{parentName:"p"},"perfData")," will contain client performance metrics which may be send to any external system for further analysis."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Call of the library should be executed only after page load in order to get actual data. Otherwise, it may return empty object without data.")),(0,i.kt)("h2",{id:"lib-interface"},"Lib interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"export interface Timings {\n  /* Connection timing from client to server */\n  connection: number;\n  /* How much time backend was preparing response */\n  backend: number;\n  /* Page download to client */\n  pageDownload: number;\n  /* Timing of first paint for a page */\n  'first-paint': number;\n  /* Timing when DOM becomes interactive */\n  domInteractive: number;\n  /* DOM building is complete */\n  domComplete: number;\n  /* Page and every resource were loaded */\n  pageLoadTime: number;\n  /* Common information about resources and its loading time grouped by type */\n  download: {\n    html: TimingResource;\n    js: TimingResource;\n    css: TimingResource;\n    img: TimingResource;\n    font: TimingResource;\n    other: TimingResource;\n  };\n}\n\ninterface TimingResource {\n  /* Timing of resource loading */\n  duration: number;\n  /* Byte-size measure of data used by resource */\n  encodedDecodeSize: number;\n  /* Byte-size measure of data transferred by network. Calculating difference between encodedDecodeSize - transferSize may reveal how much data where stored in browser cache */\n  transferSize: number;\n}\n")))}p.isMDXComponent=!0}}]);