(self.webpackChunk=self.webpackChunk||[]).push([[9073],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>s,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,d=u["".concat(p,".").concat(h)]||u[h]||m[h]||r;return n?o.createElement(d,i(i({ref:t},s),{},{components:n})):o.createElement(d,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9156:(e,t,n)=>{"use strict";n.r(t),n.d(t,{frontMatter:()=>l,contentTitle:()=>p,metadata:()=>c,toc:()=>s,default:()=>u});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),i=["components"],l={id:"how-create-async-component",title:"How to split a component into an asynchronous chunk?"},p=void 0,c={unversionedId:"how-to/how-create-async-component",id:"how-to/how-create-async-component",isDocsHomePage:!1,title:"How to split a component into an asynchronous chunk?",description:"tramvai supports splitting components into asynchronous chunks with rendering on the server and hydration on the client, using @tramvai/react",source:"@site/tmp-docs/how-to/how-create-async-component.md",sourceDirName:"how-to",slug:"/how-to/how-create-async-component",permalink:"/docs/how-to/how-create-async-component",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/how-to/how-create-async-component.md",version:"current",frontMatter:{id:"how-create-async-component",title:"How to split a component into an asynchronous chunk?"},sidebar:"docs",previous:{title:"\u041a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a papi?",permalink:"/docs/how-to/how-create-papi"},next:{title:"How to enable modern mode for an application?",permalink:"/docs/how-to/how-enable-modern"}},s=[{value:"Component example",id:"component-example",children:[]},{value:"Connecting the lazy",id:"connecting-the-lazy",children:[]},{value:"Result",id:"result",children:[]}],m={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"tramvai supports splitting components into asynchronous chunks with rendering on the server and hydration on the client, using ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/react#lazy"},(0,r.kt)("inlineCode",{parentName:"a"},"@tramvai/react"))),(0,r.kt)("h2",{id:"component-example"},"Component example"),(0,r.kt)("p",null,"Let's say we have a heavy React component that we use occasionally and we want to load it only when needed.\nRight now we have the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file heavy.tsx\nexport const Heavy = () => <div>123</div>;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file page.tsx\nimport Heavy from './heavy.tsx';\n\nconst Page = () => (\n  <>\n    <Heavy />\n    <Footer />\n  </>\n);\n")),(0,r.kt)("h2",{id:"connecting-the-lazy"},"Connecting the lazy"),(0,r.kt)("p",null,"There are several ways to split the component into asynchronous chunks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add new wrapper for ",(0,r.kt)("inlineCode",{parentName:"li"},"heavy")," into ",(0,r.kt)("inlineCode",{parentName:"li"},"page.tsx"),"."),(0,r.kt)("li",{parentName:"ul"},"Put ",(0,r.kt)("inlineCode",{parentName:"li"},"heavy")," code into a separate file and leave only async wrapper in ",(0,r.kt)("inlineCode",{parentName:"li"},"heavy.tsx"),".")),(0,r.kt)("p",null,"We'll create a new file, as this allows us not to change imports in files that have already used the ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component. And it will be harder to forget to reuse the async component in the future:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file heavy-component.tsx\nexport const Heavy = () => <div>123</div>;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file heavy.tsx\nimport { lazy } from '@tramvai/react';\n\nexport const Heavy = lazy(() => import('./heavy-component'));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// file page.tsx\nimport Heavy from './heavy.tsx';\n\nconst Page = () => (\n  <>\n    <Heavy />\n    <Footer />\n  </>\n);\n")),(0,r.kt)("p",null,"We created a new file, put all the code of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component there, and left only the component itself in the old file, which we wrapped in ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy")," and imported the original component with ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),". Now instead of the original ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component we will have an asynchronous version which we will load only when rendering the ",(0,r.kt)("inlineCode",{parentName:"p"},"Page")," component."),(0,r.kt)("h2",{id:"result"},"Result"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Heavy")," component will be loaded by demand"),(0,r.kt)("p",null,"Next, the component will be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Automatically put in a separate webpack chunk"),(0,r.kt)("li",{parentName:"ul"},"When rendering, SSR will automatically download the file and immediately render it on the server"),(0,r.kt)("li",{parentName:"ul"},"JS and CSS of the chunk will be inserted into the HTML with maximum priority"),(0,r.kt)("li",{parentName:"ul"},"It will work seamlessly in the browser")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/how-to/ssr-async-components"},"Example of work in a test application")))}u.isMDXComponent=!0}}]);