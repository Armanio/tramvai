"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7776],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),u=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(a.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(r),f=o,g=l["".concat(a,".").concat(f)]||l[f]||m[f]||i;return r?n.createElement(g,s(s({ref:t},p),{},{components:r})):n.createElement(g,s({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=l;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var u=2;u<i;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},4426:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>c,contentTitle:()=>a,metadata:()=>u,toc:()=>p,default:()=>l});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),s=["components"],c={},a=void 0,u={unversionedId:"references/tokens/metrics",id:"references/tokens/metrics",title:"metrics",description:"Tramvai tokens for integration and extension metric module.",source:"@site/tmp-docs/references/tokens/metrics.md",sourceDirName:"references/tokens",slug:"/references/tokens/metrics",permalink:"/docs/references/tokens/metrics",editUrl:"https://github.com/Tinkoff/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/references/tokens/metrics.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"http-client",permalink:"/docs/references/tokens/http-client"},next:{title:"render",permalink:"/docs/references/tokens/render"}},p=[{value:"Tokens list",id:"tokens-list",children:[],level:2}],m={toc:p};function l(e){var t=e.components,r=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tramvai tokens for integration and extension ",(0,i.kt)("a",{parentName:"p",href:"/docs/references/modules/metrics"},"metric module"),"."),(0,i.kt)("h2",{id:"tokens-list"},"Tokens list"),(0,i.kt)("p",null,(0,i.kt)("pre",{parentName:"p"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createToken } from '@tinkoff/dippy';\nimport type {\n  Counter,\n  CounterConfiguration,\n  Gauge,\n  GaugeConfiguration,\n  Histogram,\n  HistogramConfiguration,\n  Summary,\n  SummaryConfiguration,\n} from 'prom-client';\n\ninterface Metrics {\n  counter<T extends string = string>(opt: CounterConfiguration<T>): Counter<T>;\n  gauge<T extends string = string>(opt: GaugeConfiguration<T>): Gauge<T>;\n  histogram<T extends string = string>(opt: HistogramConfiguration<T>): Histogram<T>;\n  summary<T extends string = string>(opt: SummaryConfiguration<T>): Summary<T>;\n}\n\nexport { Counter, Gauge, Histogram, Summary, Metrics };\n\n/**\n * @description\n * Metric module implementation\n */\nexport const METRICS_MODULE_TOKEN = createToken<Metrics>('metricsModule');\n\nexport interface MetricsServicesRegistryInterface {\n  register(url: string, serviceName: string): void;\n  registerEnv(env: Record<string, unknown>): void;\n  getServiceName(url: string): string | void;\n}\n\n/**\n * @description\n * Utility for pointing out to metric module which service name to set for different requests\n */\nexport const METRICS_SERVICES_REGISTRY_TOKEN = createToken<MetricsServicesRegistryInterface>(\n  'metricsServicesRegistry'\n);\n\n/**\n * @description\n * Token for registering counter metric which can be incremented with POST papi request\n */\nexport const REGISTER_INSTANT_METRIC_TOKEN = createToken<[string, Counter<string>]>(\n  'registerInstantMetric'\n);\n\n"))))}l.isMDXComponent=!0}}]);